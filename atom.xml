<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoMai&#39;s Coding</title>
  
  <subtitle>少玩手机</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="xvanning.cn/"/>
  <updated>2018-07-08T15:42:18.541Z</updated>
  <id>xvanning.cn/</id>
  
  <author>
    <name>Amos Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java对象序列化</title>
    <link href="xvanning.cn/2018/07/08/Java%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>xvanning.cn/2018/07/08/Java对象序列化/</id>
    <published>2018-07-08T15:41:56.000Z</published>
    <updated>2018-07-08T15:42:18.541Z</updated>
    
    <content type="html"><![CDATA[<p>#概念：</p><p><strong>将在内存中保存的对象变为二进制数据流的形式进行传输，或者是将其保存在文本中，并不意味着所有类都可以被序列化。需要被序列化的类对象往往需要传输使用。同时这个类必须实现java.io.Serializable接口。但是这个类并没有任何的方法定义，只是一个标识接口</strong></p><p><strong>使用序列化的情况：</strong></p><pre><code>· 需要通过网络来发送对象，或对象的状态需要被持久化到数据库或文件中。· 序列化能实现深复制，即可以复制引用的对象。</code></pre><p><strong>定义可以被序列化的类：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;serial&quot;)</span><br><span class="line">class Person implements Serializable&#123;</span><br><span class="line">private String name;</span><br><span class="line">private int age;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Person [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public Person(String name, int age) &#123;</span><br><span class="line">super();</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>序列化对象时要保存的就是对象中的属性。所以默认情况下对象的属性将被转为二进制数据流。<br>如果想要实现序列化和反序列化对象操作，在<code>java.io</code>提供有两个类：<code>ObjectOutputStream序列化</code>、<code>ObjectInputStream反序列化</code></p><p><img src="http://pa556khhl.bkt.clouddn.com/2.12.png" alt="这里写图片描述"><br><img src="http://pa556khhl.bkt.clouddn.com/2.13.png" alt="这里写图片描述"></p><p><strong>下面例子简单实现对象序列化和反序列化：</strong></p><p><strong>第一步创建 Person 类：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;serial&quot;)</span><br><span class="line">class Person implements Serializable&#123;</span><br><span class="line">private String name;</span><br><span class="line">private int age;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Person [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public Person(String name, int age) &#123;</span><br><span class="line">super();</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第二步创建测试类 TestDemo 类：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class TestDemo &#123;</span><br><span class="line">public static final File file = new File(&quot;C:&quot; + File.separator + &quot;Users&quot; + File.separator +&quot;lenovo&quot; + File.separator +&quot;Desktop&quot; + File.separator + &quot;person.ser&quot;);</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">ser(new Person(&quot;张三&quot;, 20));</span><br><span class="line">dser();</span><br><span class="line">&#125;</span><br><span class="line">public static void ser(Object obj) throws Exception &#123;</span><br><span class="line">ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file));</span><br><span class="line">oos.writeObject(obj);</span><br><span class="line">oos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void dser() throws Exception &#123;</span><br><span class="line">ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file));</span><br><span class="line">Object read = ois.readObject();</span><br><span class="line">System.out.println(read);</span><br><span class="line">ois.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><blockquote><p>个人博客链接：<a href="xvanning.cn">xvanning.cn</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#概念：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将在内存中保存的对象变为二进制数据流的形式进行传输，或者是将其保存在文本中，并不意味着所有类都可以被序列化。需要被序列化的类对象往往需要传输使用。同时这个类必须实现java.io.Serializable接口。但是这个类并没有任何的方
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【Java基础】IO编程</title>
    <link href="xvanning.cn/2018/07/08/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91IO%E7%BC%96%E7%A8%8B/"/>
    <id>xvanning.cn/2018/07/08/【Java基础】IO编程/</id>
    <published>2018-07-08T09:29:08.000Z</published>
    <updated>2018-07-08T15:31:30.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h1><p>IO的操作部分重点掌握两个代码模型：</p><ul><li><strong>五个类（File、outputstream、inputstream、writer、reader）</strong></li><li><strong>一个接口（Serializable）</strong></li></ul><blockquote><p>在java.io包之中file类是唯一一个与文件本身操作（文件的创建、删除、取得文件信息等等）</p></blockquote><hr><h2 id="1-File类的基本使用"><a href="#1-File类的基本使用" class="headerlink" title="1. File类的基本使用"></a>1. File类的基本使用</h2><p>Java.io.File是一个普通的类，所以直接实例化对象操作就好。实例对象需要两个构造方法</p><pre><code>· 构造方法一：File(String pathname) · 构造方法二：File(File parent, String child) 设置父路径和子路径</code></pre><p>如果要进行文件的基本操作可以使用如下方法：</p><pre><code>· 创建一个新文件：public boolean createNewFile()· 删除一个文件：public boolean delete()· 判断文件是否存在：public boolean exists()</code></pre><p><img src="http://pa556khhl.bkt.clouddn.com/2.1.png" alt="这里写图片描述"></p><hr><h1 id="2-目录创建"><a href="#2-目录创建" class="headerlink" title="2. 目录创建"></a>2. 目录创建</h1><pre><code>· 取得父路径：public File getParentFile()· 创建目录：public boolean mkdirs()· 路径分隔符常量：public static final String separator (file.separator)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class TestDemo &#123;</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">File file = new File(&quot;C:&quot; + File.separator + &quot;Users&quot; + File.separator +&quot;lenovo&quot; + File.separator +&quot;Desktop&quot; + File.separator +&quot;hello&quot; + File.separator +&quot;hello_world.txt&quot;);</span><br><span class="line">if (!file.getParentFile().exists()) &#123;//父目录不存在</span><br><span class="line">file.getParentFile().;//创建父目录</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (file.exists()) &#123;</span><br><span class="line">file.delete();</span><br><span class="line">&#125;else &#123;</span><br><span class="line">file.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意： </strong> 创建目录会用到路径分隔符常量：public static final String separator (file.separator)为了区分不同系统的不同分隔符，在Windows系统中为C:\XXX，而在linux系统中为C:/XXX</p></blockquote><hr><p>##3. 取得文件信息</p><p><strong>3.1 针对文件： </strong></p><pre><code>· 判断路径是否是文件：public boolean isFile()· 判断路径是否是目录：public boolean isDirectory()· 取得文件大小（字节）：public long length()· 最后修改日期：public long lastModified()</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Mymath &#123;</span><br><span class="line">public static double round(double num, int scale) &#123;</span><br><span class="line">return Math.round(num * Math.pow(10, scale)) / Math.pow(10, scale);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TestDemo &#123;</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">File file = new File(&quot;C:&quot; + File.separator + &quot;Users&quot; + File.separator +&quot;lenovo&quot; + File.separator +&quot;Desktop&quot; + File.separator +&quot;time.png&quot;);</span><br><span class="line">if (file.exists() &amp;&amp; file.isFile()) &#123;</span><br><span class="line">System.out.println(&quot;文件大小：&quot; + Mymath.round(file.length()/(double) 1024 / 1024, 2));</span><br><span class="line">System.out.println(&quot;最后一次修改日期：&quot; + new Date(file.lastModified()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.2 针对目录：</strong></p><pre><code>· 列出目录中的全部组成：public File[] listFiles()</code></pre><hr><p>##4. File类操作：列出子目录内容</p><p><strong>listFiles()只能列出本目录第一级的信息，如果要求列出目录中所有级的信息，则就必须自己来实现处理。必须通过递归的操作来实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class TestDemo &#123;</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">File file = new File(&quot;C:&quot; + File.separator + &quot;Users&quot; + File.separator +&quot;lenovo&quot; + File.separator +&quot;Desktop&quot; );</span><br><span class="line"></span><br><span class="line">listdir(file);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public static void listdir(File file)&#123;</span><br><span class="line"></span><br><span class="line">if (file.isDirectory()) &#123;</span><br><span class="line">File result [] = file.listFiles();</span><br><span class="line">for (int i = 0; i &lt; result.length; i++) &#123;</span><br><span class="line">listdir(result[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>##5. 字节流与字符流<br><strong>File类不支持文件内容处理，如果要处理文件必须要通过流模式来完成。流分为输入流和输出流</strong><br><img src="http://pa556khhl.bkt.clouddn.com/2.2.png" alt="这里写图片描述"><br><img src="http://pa556khhl.bkt.clouddn.com/2.3.png" alt="这里写图片描述"></p><p><strong>字节流和字符流的区别：</strong></p><ul><li>字节流是原生的操作。字符流是经过处理后的操作，在你进行网络数据传输、磁盘数据保存所- 保存的支持的数据类型只有：字节。</li><li>而所有磁盘中的数据必须先读取到内存后才可以操作。内存里面回帮助我们讲字节变为字符。字符更加适合处理中文。</li><li><p>只有处理中文才会用字符流，字符流通过缓存来处理，需要close()或者flush()，来强制输出</p><pre><code>· 字节流：InputStream、OutputStream;· 字符流：Reader、Writer</code></pre></li></ul><p><strong>不管使用的字节流还是字符流，一定要记住，其使用流程基本是固定的：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">要根据文件的路径创建File类对象</span><br><span class="line">根据字节流或字符流的子类实例化父类对象</span><br><span class="line">进行数据的读取、写入操作</span><br><span class="line">关闭流（close（））</span><br></pre></td></tr></table></figure></p><p><strong>对于IO操作属于资源处理，所有的资源操作处理必须要进行关闭</strong></p><hr><p>##6. 字节输出流 (OutputStream)<br><strong>实现了Closeable、Flushable两个接口</strong></p><pre><code>· Closeable : public void close() throws IOException· Flushable : public void flush() throws IOException</code></pre><p><strong>OutputStream里面的方法：</strong></p><pre><code>· 将给定的字节数组内容全部输出：public void write(byte[] b) throws IOException· 将部分的字节数组内容输出：public void write(byte[] b,int off,int len) throws IOException· 输出单个字节：public abstract void write(int b) throws IOException· 接收File类：public FileOutputStream(File file)throws FileNotFoundException· 追加内容：public FileOutputStream(File file,boolean append) throws FileNotFoundException</code></pre><p><img src="http://pa556khhl.bkt.clouddn.com/2.4.png" alt="这里写图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class TestDemo &#123;</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">//1.新建File类对象</span><br><span class="line">File file = new File(&quot;C:&quot; + File.separator + &quot;Users&quot; + File.separator +&quot;lenovo&quot; + File.separator +&quot;Desktop&quot; + File.separator + &quot;hello.txt&quot; );</span><br><span class="line">if (!file.getParentFile().exists()) &#123;//确保目录存在</span><br><span class="line">file.getParentFile().mkdirs();</span><br><span class="line">&#125;</span><br><span class="line">//2.OutputStream是一个抽象类。所以需要通过子类进行实例化，意味着只能进行文件操作</span><br><span class="line">OutputStream output = new FileOutputStream(file,true);</span><br><span class="line">//3.进行文件的输出处理操作。</span><br><span class="line">String msg = &quot;abcdefghijk\r\n&quot;;//要求输出的内容</span><br><span class="line">output.write(msg.getBytes(),0,3);//将内容变为字节数组</span><br><span class="line">//4.关闭输出</span><br><span class="line">output.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>##7. 字节输入流 (InputStream）</p><p><strong>字节输出流实现了内容到文件的处理，现在要进行文件到内容的处理，通过程序读取内容</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract class InputStream extends Object implements Closeable</span><br></pre></td></tr></table></figure></p><p><strong>有如下方法：</strong></p><pre><code>· 读取数据到字节数组之中: public int read(byte[] b) throws IOException  返回数据的读取个数如果此时开辟的字节数组大小大于了读取的数据大小，则返回的就是读取个数 如果此时要读取的数据大于开辟的数组内容，返回的就是数组的长度。                                                                                                                                                        · 读取部分数据到字节数组之中: public int read(byte[] b,int off,int len) throws IOException 每次只读取传递数组的部分内容，如果读取满了则返回的就是长度（len）。如果没有读取满，那么就是返回的读取的数据个数，如果最后没有数据了返回-1                                                                                                         · 读取单个字节：public abstract int read() throws IOException 每次只读取传递数组的一个字节的内容。如果最后没有数据了返回-1</code></pre><blockquote><p><strong>同理：</strong> InputStream是一个抽象类，所以按照抽象类的一个原则来讲，要想为我们的父类实例化，那么就需要使用子类。因为方法名称都被父类定义好了。所以我们所关注的只是子类的构造方法。如果要进行文件的操作，可以使用FileIntputStream类来处理</p></blockquote><p><img src="http://pa556khhl.bkt.clouddn.com/2.5.png" alt="这里写图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class TestDemo &#123;</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">//1.新建File类对象</span><br><span class="line">File file = new File(&quot;C:&quot; + File.separator + &quot;Users&quot; + File.separator +&quot;lenovo&quot; + File.separator +&quot;Desktop&quot; + File.separator + &quot;hello.txt&quot; );</span><br><span class="line">if (file.exists()) &#123;//确保目录存在</span><br><span class="line">InputStream input = new FileInputStream(file);</span><br><span class="line">byte data[] = new byte[1024]; //每次可以读取的最大数量</span><br><span class="line">int len = input.read(data);//</span><br><span class="line">System.out.println(&quot;读取内容为： &quot; + new String(data,0,len));</span><br><span class="line">input.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>##8.字符输出流 (Writer）</p><p><strong>字符适合处理中文数据，Writer类是字符输出流的处理类，定义如下：</strong></p><pre><code>· 输出内容：public void write(String str) throws IOException</code></pre><p><strong>如果要操作文件肯定使用FileWriter子类，通过Writer实现输出</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class TestDemo &#123;</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">//1.新建File类对象</span><br><span class="line">File file = new File(&quot;C:&quot; + File.separator + &quot;Users&quot; + File.separator +&quot;lenovo&quot; + File.separator +&quot;Desktop&quot; + File.separator + &quot;hello.txt&quot; );</span><br><span class="line">if (!file.getParentFile().exists()) &#123;//确保目录存在</span><br><span class="line">file.getParentFile().mkdirs();</span><br><span class="line">&#125;</span><br><span class="line">String msg = &quot;世界和平！&quot;;</span><br><span class="line">Writer wt = new FileWriter(file);</span><br><span class="line">wt.write(msg);</span><br><span class="line">wt.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>##9.字符输入流 (Reader)</p><p><strong>直接上例子： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class TestDemo &#123;</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">//1.新建File类对象</span><br><span class="line">File file = new File(&quot;C:&quot; + File.separator + &quot;Users&quot; + File.separator +&quot;lenovo&quot; + File.separator +&quot;Desktop&quot; + File.separator + &quot;hello.txt&quot; );</span><br><span class="line">if (file.exists()) &#123;//确保目录存在</span><br><span class="line">Reader input = new FileReader(file);</span><br><span class="line">char data[] = new char[1024]; //每次可以读取的最大数量</span><br><span class="line">int len = input.read(data);//</span><br><span class="line">System.out.println(&quot;读取内容为： &quot; + new String(data,0,len));</span><br><span class="line">input.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>##10. 转换流<br><strong>字节流和字符流互相转换：</strong></p><pre><code>· OutputStreamWriter：将字节输出流转换为字符输出流· InputStreamReader：将字节输入流转换为字符输入流</code></pre><p><img src="http://pa556khhl.bkt.clouddn.com/2.6.png" alt="这里写图片描述"></p><hr><p>##11. 内存操作流</p><p><strong>IO操作除了可以在文件中，也可以在内存中，进行内存操作流。文件流的操作一定会产生一个文件数据（不管这个文件数据最后保存与否）。如果希望进行IO处理，又不希望产生文件。这种情况下就可以使用内存作为操作的终端。</strong></p><pre><code>· 字节内存流：ByteArrayInputStream  ByteArrayOutputStream · 字符内存流：CharArrayReader  CharArrayWriter </code></pre><p><img src="http://pa556khhl.bkt.clouddn.com/2.7.png" alt="这里写图片描述"><br><img src="http://pa556khhl.bkt.clouddn.com/2.8.png" alt="这里写图片描述"><br><img src="http://pa556khhl.bkt.clouddn.com/2.9.png" alt="这里写图片描述"></p><p><strong>-通过内存流实现大小写转换的操作： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Copy &#123;</span><br><span class="line">//没有文件产生，理解为临时文件</span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">String msg = &quot;hello world!!!&quot;;</span><br><span class="line">byte[] buf = new byte[1024];</span><br><span class="line">buf = msg.getBytes();</span><br><span class="line">InputStream input = new ByteArrayInputStream(buf);</span><br><span class="line">OutputStream output = new ByteArrayOutputStream();</span><br><span class="line">int temp = 0;</span><br><span class="line">while ((temp = input.read()) != -1) &#123;</span><br><span class="line">output.write(Character.toUpperCase(temp));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(output);</span><br><span class="line">input.close();</span><br><span class="line">output.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>##12. BufferedReader类（文件输入）</p><p><strong>BufferedReader类的重要方法：</strong></p><pre><code>· 读取一行：public String readLine() throws IOException</code></pre><p><img src="http://pa556khhl.bkt.clouddn.com/2.11.png" alt="这里写图片描述"></p><p><strong>输入信息读取： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class TestDemo &#123;</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">InputStreamReader input = new InputStreamReader(System.in);</span><br><span class="line">BufferedReader buf = new BufferedReader(input);</span><br><span class="line">System.out.print(&quot;请输入信息： &quot;);</span><br><span class="line">String str = buf.readLine();</span><br><span class="line">System.out.println(&quot;输入信息： &quot; + str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>##13. Scanner类（文件输入）<br><strong>Scanner类替换了BufferedReader类，它是一个专门进行输入流处理的程序类、同时也可以直接结合正则表达式进行各项处理</strong><br><strong>注意以下方法：</strong></p><pre><code>· 判断是否有指定类型的数据：public boolean hasNextXXX()· 取得指定类型的数据：public 数据 nextXXX()· 定义分隔符：public Scanner useDelimiter(String pattern)· 构造方法：public Scanner(InputStream source)</code></pre><p><strong>使用Scanner实现数据的输入： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class TestDemo &#123;</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">Scanner scan = new Scanner(System.in);</span><br><span class="line">System.out.print(&quot;请输入内容： &quot;);</span><br><span class="line">if (scan.hasNext()) &#123;//现在有输入内容，补判断空字符串</span><br><span class="line">System.out.println(&quot;输入内容为： &quot; + scan.next());</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>##14. 打印流（不能做二进制的输出）</p><p>除了二进制类型的文件拷贝。以后文件输出用打印流（PrintWriter）：</p><pre><code>PrintWriter = new PrintWriter(new FileOutputStream(new File(pathname)));</code></pre><p>文件输入用Scanner扫描流</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink&quot; title=&quot;概述：&quot;&gt;&lt;/a&gt;概述：&lt;/h1&gt;&lt;p&gt;IO的操作部分重点掌握两个代码模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;五个类（File、outputstream、inpu
      
    
    </summary>
    
      <category term="JAVA笔记" scheme="xvanning.cn/categories/JAVA%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo教程</title>
    <link href="xvanning.cn/2018/06/11/hexo%E6%95%99%E7%A8%8B/"/>
    <id>xvanning.cn/2018/06/11/hexo教程/</id>
    <published>2018-06-11T04:49:53.000Z</published>
    <updated>2018-06-11T05:05:10.048Z</updated>
    
    <content type="html"><![CDATA[<p>关于什么hexo自行百度，就不详细复制黏贴了，主要把一些其他教程没有的步骤和问题整合展示一下：</p><p>我的个人博客展示：<a href="https://xvanning.cn/">XiaoMai’s Coding</a></p><h1 id="hexo博客的基本搭建"><a href="#hexo博客的基本搭建" class="headerlink" title="hexo博客的基本搭建"></a>hexo博客的基本搭建</h1><ul><li><strong>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>，一直点下一步就好了</strong></li></ul><p>安装Node.js会自动配置环境变量以及自动安装npm。<br>检验是否安装成功，命令行输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></p><p><img src="http://pa556khhl.bkt.clouddn.com/9.png" alt="这里写图片描述"></p><ul><li><p><strong>安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>，一直点下一步就好了</strong></p></li><li><p><strong>创建自己的<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>，以及<a href="https://www.zhihu.com/question/20070065" target="_blank" rel="noopener">GitHub的使用</a></strong></p></li></ul><p><img src="http://pa556khhl.bkt.clouddn.com/1.png" alt="这里写图片描述"><br><img src="http://pa556khhl.bkt.clouddn.com/2.png" alt="这里写图片描述"><br><img src="http://pa556khhl.bkt.clouddn.com/3.png" alt="这里写图片描述"></p><p>创建完成后，返回<code>your profile</code>界面会出现如下图所示的仓库</p><p><img src="http://pa556khhl.bkt.clouddn.com/4.png" alt="这里写图片描述"></p><ul><li><strong>将你的Git与GitHub帐号绑定，免去推送重复输入密码的繁琐</strong></li></ul><p>关于<code>SSH</code>的内容可以自行百度。以下只提供创建步骤。</p><p>鼠标右击打开<code>Git Bash</code></p><p><img src="http://pa556khhl.bkt.clouddn.com/5.png" alt="这里写图片描述"></p><p>输入如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure></p><p>然后按<code>三次回车键</code>，有跳出界面让你输入密码就输入<br>然后找到如下文件：</p><p><img src="http://pa556khhl.bkt.clouddn.com/6.png" alt="这里写图片描述"></p><p>用记事本打开<code>id_rsa.pub</code>文件，复制里面的内容。<br>然后打开 <a href="https://github.com/settings/keys" target="_blank" rel="noopener">SSH keys</a>，点击<code>New SSH key</code>，标题任意，内容黏贴你刚才复制的id_rsa.pub文件的内容。点击<code>Add SSH key</code>。密钥创建成功</p><p><img src="http://pa556khhl.bkt.clouddn.com/7.png" alt="这里写图片描述"><br><img src="http://pa556khhl.bkt.clouddn.com/8.png" alt="这里写图片描述"></p><p>最后检测Git与GitHub帐号是否绑定成功，在任意地方打开Git Bash 输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure></p><p>如下所示则说明绑定成功。</p><p><img src="http://pa556khhl.bkt.clouddn.com/10.png" alt="这里写图片描述"></p><ul><li><strong>安装Hexo</strong></li></ul><p>在你的常用磁盘中创建一个文件夹，命名随意（例如 blog，以下都用blog名称来示例）用作以后个人博客的框架以及网页内容的存储。然后进入该文件夹，在该文件内打开命令行窗口（<code>按住Shift + 右键</code>）。然后输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><ul><li><strong>创建博客界面</strong></li></ul><p>安装完成后，首先初始化博客，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog //初始化博客</span><br></pre></td></tr></table></figure></p><p>初始化之后你的 blog文件夹里会出现一系列文件，这些文件的介绍和基本命令的介绍请移步：<a href="http://code.skyheng.com/post/50982.html" target="_blank" rel="noopener">http://code.skyheng.com/post/50982.html</a></p><p>然后再依次 新建文章、生成页面、本地发布<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new  new_blog //新建文章</span><br><span class="line">hexo g //生成页面</span><br><span class="line">hexo s //本地发布</span><br></pre></td></tr></table></figure></p><p>完成后，打开浏览器输入如下地址，就可以看到你生成的博客了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:4000 //这里可能会出现问题。某些软件会（例如福昕阅读器）占用4000端口。</span><br></pre></td></tr></table></figure></p><p>解决办法：<a href="https://segmentfault.com/q/1010000008546859?_ea=1678427" target="_blank" rel="noopener">修改Hexo4000端口占用解决办法</a></p><ul><li><strong>发布博客到网上</strong></li></ul><p>上面一系列只是在本地预览，接下来要做的就是发布网站，让我们的网站可以在互联网上被人访问到。打开 blog 文件夹里的<code>_config.yml</code> 站点配置文件。<br>搜索<code>deploy</code> 进行如下修改后<code>保存</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">type: git</span><br><span class="line">repo: 这里填入你之前在GitHub上创建仓库的完整路径。例如https://github.com/xvanning/xvanning.github.io</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></p><p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>然后输入如下三条命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>然后就可以在浏览器上输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx.github.io  //例如xvanning.github.io</span><br></pre></td></tr></table></figure></p><p>这样你的博客就可以在互联网上被访问到了。</p><ul><li><strong>绑定域名</strong></li></ul><p>如果想要使用个性化域名，比如 <code>www.你的姓名.cn</code> 这样的形式访问你的博客则可以通过如下步骤：</p><pre><code>1、[阿里云](www.aliyun.com)买个域名2、解析域名3、登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名（xvanning.cn）4、进入blog/source目录下，创建一个记事本文件，输入你的域名（xvanning.cn），去掉后缀.txt。5、打开`_config.yml` ，搜索并且修改 url: xvanning.cn //你的个性化域名</code></pre><p>1、3、4、5步骤都很简单。现在介绍第二个步骤将解析域名：<br>登陆你的阿里云账户，找到<code>域名控制台</code> ，依次点击 <code>解析</code> 、 <code>新手引导</code> 。</p><p><img src="http://pa556khhl.bkt.clouddn.com/12.png" alt="这里写图片描述"><br><img src="http://pa556khhl.bkt.clouddn.com/13.png" alt="这里写图片描述"></p><p>这里的记录值可以通过如下方式得到：<br>打开 <code>命令行</code> ，输入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping xxx.github.io //例如 ping xvanning.github.io</span><br></pre></td></tr></table></figure></p><p><img src="http://pa556khhl.bkt.clouddn.com/15.png" alt="这里写图片描述"></p><blockquote><p><strong>注意：</strong>这里可能会存在有问题：不同时间去ping可能会ping 出两个不同的IP，需要你把两个IP都进行解析。也就是按两次新手引导。输入两次记录值。    </p></blockquote><p>完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。</p><hr><h1 id="hexo博客的主题更换"><a href="#hexo博客的主题更换" class="headerlink" title="hexo博客的主题更换"></a>hexo博客的主题更换</h1><ul><li><strong><a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题目录</a></strong></li></ul><p>hexo有非常多的主题，大家可以自行更换默认目录。可以通过如下命令下载主题(以next主题为例子) ，在blog目录下打开命令行窗口输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p>打开<code>_config.yml</code> 站点配置文件，进行如下修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 搞清楚站点配置文件<code>_config.yml</code>，和blog\themes\next文件夹下的主题配置文件<code>_config.yml</code></p></blockquote><p>另外关于next主题的扩展，请移步：<a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009544924</a></p><hr><h1 id="博客写作"><a href="#博客写作" class="headerlink" title="博客写作"></a>博客写作</h1><ul><li><strong>Markdown</strong></li></ul><p>Markdown的介绍自行百度，编辑器windows推荐The Markdown Editor for Windows 。</p><ul><li><strong>发布文章</strong></li></ul><p>在blog文件夹下输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;博客名字&quot;</span><br></pre></td></tr></table></figure></p><p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 博客名字.md 文件，使用Markdown编辑器打开就可以进行编写了。编写完毕之后就可以hexo s 在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入域名浏览。</p><hr><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>大概熟悉了之后就可以参考</p><p><a href="https://blog.csdn.net/xuezhisdc/article/details/53130383" target="_blank" rel="noopener">hexo站点文件的配置</a></p><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo使用文档</a></p><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT使用文档</a></p><p>进行一些自定义的操作了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于什么hexo自行百度，就不详细复制黏贴了，主要把一些其他教程没有的步骤和问题整合展示一下：&lt;/p&gt;
&lt;p&gt;我的个人博客展示：&lt;a href=&quot;https://xvanning.cn/&quot;&gt;XiaoMai’s Coding&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;hexo博客的基本
      
    
    </summary>
    
      <category term="JAVA笔记" scheme="xvanning.cn/categories/JAVA%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>开始博客</title>
    <link href="xvanning.cn/2018/05/28/%E5%BC%80%E5%A7%8B%E5%8D%9A%E5%AE%A2/"/>
    <id>xvanning.cn/2018/05/28/开始博客/</id>
    <published>2018-05-28T07:18:02.000Z</published>
    <updated>2018-05-28T09:06:42.603Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>前言：懒癌发作憋出来的个人博客</strong></p></blockquote><p>以前在网络上查阅资料的时候经常看见很多大神的技术博客，就觉得以后要是自己能有一个博客来记录一下自己的学习和生活该是一件多么酷炫的事情。</p><blockquote><p><strong>然而我实在是太懒了，到现在才搞完这个博客。</strong></p></blockquote><p>准备先整理补上我的以前的一些笔记内容。至少是要好好排排版啊。先写个大纲吧~</p><hr><h2 id="博客大纲"><a href="#博客大纲" class="headerlink" title="博客大纲"></a>博客大纲</h2><ul><li>生活随笔：    <code>写一些自己的生活趣事，相当于朋友圈</code>   </li><li>JAVA笔记 ：   <code>本人学习JAVA的笔记</code>   </li><li>实验室笔记：   <code>实验室方向为卫星通信</code>  </li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前言：懒癌发作憋出来的个人博客&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以前在网络上查阅资料的时候经常看见很多大神的技术博客，就觉得以后要是自己能有一个博客来记录一下自己的学习和生活该是一件多么酷炫的事情。&lt;/p
      
    
    </summary>
    
      <category term="生活随笔" scheme="xvanning.cn/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
